GET >> /bulk/devices >> List devices. Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with '-'.
POST >> /bulk/devices/add >> Register multiple new devices. Register multiple new devices, each request can contain a maximum of 512 kB. The response body will contain the generated authentication tokens for all devices. You must make sure to record these tokens when processing the response. We are not able to retrieve lost authentication tokens.
POST >> /bulk/devices/remove >> Delete multiple devices. Delete multiple devices, each request can contain a maximum of 512 kB.
GET >> /device/types >> List device types. Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with '-'):
POST >> /device/types >> Create device type.
GET >> /device/types/{typeId} >> Get device type. Gets device type details.
PUT >> /device/types/{typeId} >> Update device type. Updates a device type.
DELETE >> /device/types/{typeId} >> Delete device type. Deletes a device type.
GET >> /device/types/{typeId}/devices >> List devices. Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with '-').
POST >> /device/types/{typeId}/devices >> Add device. Adds a device.
GET >> /device/types/{typeId}/devices/{deviceId} >> Get device. Gets device details.
PUT >> /device/types/{typeId}/devices/{deviceId} >> Update device. Updates a device.
DELETE >> /device/types/{typeId}/devices/{deviceId} >> Remove device. Removes a device.
GET >> /device/types/{typeId}/devices/{deviceId}/devices >> Get devices that are connected through the gateway specified by id {deviceId}. Gets information on devices that are connected through the specified gateway (typeId, deviceId) to Watson IoT Platform.
GET >> /device/types/{typeId}/devices/{deviceId}/edgestatus >> Return the status of containers from an edge node. Return the status of containers from an edge node.
GET >> /device/types/{typeId}/devices/{deviceId}/edgestatus/{serviceId} >> Return the status of containers from an edge node filtering by service. Return the status of containers from an edge node filtering by service.
GET >> /logs/connection >> List device connection log events. List connection log events for a device to aid in diagnosing connectivity problems. The entries record successful connection, unsuccessful connection attempts, intentional disconnection and server-initiated disconnection.
GET >> /usage/data-traffic >> Retrieve the amount of data used. Retrieve the amount of data used.
GET >> /service-status >> Retrieve the status of services for an organization. Retrieve the organization-specific status of each of the services offered by Watson IoT Platform.
GET >> /device/types/{typeId}/devices/{deviceId}/diag/logs >> Get all device diagnostic logs. Gets diagnostic logs for a device.
POST >> /device/types/{typeId}/devices/{deviceId}/diag/logs >> Add device diagnostic log information. Adds an entry in the log of diagnostic information for the device. If no date is supplied, the entry is added with the current date and time. The 10 most recent entries will be retained until either the device is deleted or the clear logs API is called.
DELETE >> /device/types/{typeId}/devices/{deviceId}/diag/logs >> Clear diagnostic log. Clears the diagnostic log for the device.
GET >> /device/types/{typeId}/devices/{deviceId}/diag/logs/{logId} >> Get device diagnostic log. Gets diagnostic log for a device.
DELETE >> /device/types/{typeId}/devices/{deviceId}/diag/logs/{logId} >> Delete diagnostic log. Delete this diagnostic log for the device.
GET >> /device/types/{typeId}/devices/{deviceId}/diag/errorCodes >> Get device diagnostic error codes. Gets diagnostic error codes for a device.
POST >> /device/types/{typeId}/devices/{deviceId}/diag/errorCodes >> Add diagnostic error code for a device. Adds an error code to the list of error codes for the device. The 10 most recent entries will be retained until either the device is deleted or the clear error codes API is called.
DELETE >> /device/types/{typeId}/devices/{deviceId}/diag/errorCodes >> Clear error codes. Clears the list of error codes for the device. The list is replaced with a single error code of zero.
GET >> /mgmt/requests >> List device management requests. Gets a list of device management requests, which can be in progress or recently completed. Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with '-'):
POST >> /mgmt/requests >> Initiate a device management request. Initiates a device management request, such as reboot. The request will fail if any of the devices participating in the request are inactive, disabled, blocked by a separate on-going firmware download/update request, or do not support the requested operation.
GET >> /mgmt/requests/{requestId} >> Get device management request. Gets details of a device management request.
DELETE >> /mgmt/requests/{requestId} >> Clear device management request status. Clears the status of a device management request. You can use this operation to clear the status for a completed request…
POST >> /mgmt/requests/{requestId}/cancel >> Cancel device management request. Cancel a device management request. You can use this operation to clear the status for an in-progress request which may never complete due to a problem. This will set all in-progress device statuses to cancelled, clear the current operation for all in-progress devices, and mark the request as complete.
GET >> /mgmt/requests/{requestId}/deviceStatus >> Get list of device management request device statuses. Gets a list of device management request device statuses for a particular request. Sorting can be performed on any of the following properties (sort order can be reversed by prefixing the property name with '-'):
GET >> /mgmt/requests/{requestId}/deviceStatus/{deviceType}/{deviceId} >> Get individual device management request device status. Get an individual device management request device status.
POST >> /mgmt/requests/{requestId}/deviceStatus/{deviceType}/{deviceId}/cancel >> Cancel device management request for an individual device. Cancels a device management request for an individual device. You can use this operation to clear the status for an in-progress request which may never complete due to a problem. This will set the device status to cancelled and clear the current operation for the device.
GET >> /mgmt/custom/bundle >> Get list of registered device management extensions
POST >> /mgmt/custom/bundle >> Add a device management extension
GET >> /mgmt/custom/bundle/{bundleId} >> Get a specific registered device management extension
PUT >> /mgmt/custom/bundle/{bundleId} >> Update an existing device management extension
DELETE >> /mgmt/custom/bundle/{bundleId} >> Delete a device management extension
GET >> /config/lec >> Retrieve the Last Event Cache configuration for your organization. Retrieves the current configuration for the Last Event Cache (LEC) feature for your organization. You can use this endpoint to determine whether or not the LEC feature is currently enabled, along with how many days cached device events will persist for before being removed from the cache.
PUT >> /config/lec >> Update the Last Event Cache configuration for your organization. Updates the current configuration for the Last Event Cache (LEC) feature for your organization. You can use this endpoint to control whether or not the LEC feature is currently enabled, along with how many days cached device events will persist for before being removed from the cache.
GET >> /device/types/{deviceType}/devices/{deviceId}/events/{eventName} >> Get last event for a specific event id for a specific device.
GET >> /device/types/{deviceType}/devices/{deviceId}/events >> Get all last events for a specific device.
GET >> /device/types/{typeId}/devices/{deviceId}/location >> Get device location information. Gets location information for a device.
PUT >> /device/types/{typeId}/devices/{deviceId}/location >> Update device location information. Updates the location information for a device. If no date is supplied, the entry is added with the current date and time.
GET >> /device/types/{typeId}/devices/{deviceId}/exts/twc/ops/geocode >> Retrieve current meteorological observations for the location associated with your device.
POST >> /application/types/{typeId}/devices/{deviceId}/events/{eventName} >> Send device event. Send an event from an application simulating a device.
POST >> /application/types/{typeId}/devices/{deviceId}/commands/{commandId} >> Publish Command. Send a command from an application
POST >> /device/types/{typeId}/devices/{deviceId}/events/{eventName} >> Send device event. Send an event from a device.
POST >> /device/types/{typeId}/devices/{deviceId}/commands/{commandId}/request >> Receive command. Receive command for a device
GET >> /s2s/services >> Get all services. The services endpoint returns the list of all of the services that the Watson IoT Platform can connect to. The list can include a mixture of services that are either bound or unbound where: Bound services are services that the Watson IoT Platform has been configured to connect to. This can include other services in the same Bluemix space as the Watson IoT Platform or external services. Unbound services are other services in the same Bluemix space as the Watson IoT Platform service that the platform has not yet been configured to connect to. The Watson IoT Platform Dashboard UI must be used to bind to these services.
POST >> /s2s/services >> Create a new service. Create a new external service. The service must include all of the details required to connect and authenticate to the external service in the credentials property. The structure of the credentials property will depend on the type of the target service.
GET >> /s2s/services/{serviceUuid} >> Get the details of a service. Retrieve the service with the specified uuid.
PUT >> /s2s/services/{serviceUuid} >> Update an external service. Updates the external service with the specified id. The following properties can be updated: name description credentials. Note that if the description field is omitted from the body of the update, then any existing description will be removed from the service.
DELETE >> /s2s/services/{serviceUuid} >> Delete an external service. Deletes the external service with the specified id from the organization in the Watson IoT Platform. Please note the the delete will fail if the service is being referenced by another object in the organization, for example, a Historian Connector resource.
GET >> /event/types >> Query active event types. Event types are used to model the events that are published to the Watson IoT Platform. An event type must be created in an organization before more complex processing can be performed on the native event. The /event/types endpoint returns the list of all of the active event types that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of active event types that are returned.
GET >> /event/types/{eventTypeId} >> Get an active event type. Retrieve the active event type with the specified id.
GET >> /draft/event/types >> Query draft event types. Event types are used to model the events that are published to the Watson IoT Platform. An event type must be created in an organization before more complex processing can be performed on the native event. The /draft/event/types endpoint returns the list of all of the draft event types that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of draft event types that are returned.
POST >> /draft/event/types >> Create a draft event type. Creates a new draft event type for the organization in the Watson IoT Platform. The draft event type must reference the schema definition that defines the structure of the inbound MQTT event.
GET >> /draft/event/types/{eventTypeId} >> Get a draft event type. Retrieve the draft event type with the specified id.
DELETE >> /draft/event/types/{eventTypeId} >> Delete a draft event type. Deletes the draft event type with the specified id from the organization in the Watson IoT Platform. Please note the the delete will fail if the draft event type is being referenced by a physical interface.
GET >> /physicalinterfaces >> Query active phyiscal interfaces. Physical interfaces are used to model the interfaces between physical devices and the Watson IoT Platform. A physical interface references event types. Devices that implement a physical interface publish these events to the platform. The event types are referenced via a mapping that maps an event id to the id of an event type. The event id corresponds to the MQTT topic that the event is published to by a device. The physicalinterfaces endpoint returns the list of all of the active physical interfaces that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of active physical interfaces that are returned.
GET >> /physicalinterfaces/{physicalInterfaceId} >> Get an active physical interface. Retrieve the active physical interface with the specified id.
GET >> /physicalinterfaces/{physicalInterfaceId}/events >> Get the list of event mappings. Retrieve the list of event mappings for the active physical interface. Event mappings are keyed off of the event id specified in the MQTT topic that the inbound events are published to.
GET >> /draft/physicalinterfaces >> Query draft phyiscal interfaces. Physical interfaces are used to model the interfaces between physical devices and the Watson IoT Platform. A physical interface references event types. Devices that implement a physical interface publish these events to the platform. The event types are referenced via a mapping that maps an event id to the id of an event type. The event id corresponds to the MQTT topic that the event is published to by a device. The /draft/physicalinterfaces endpoint returns the list of all of the draft physical interfaces that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of draft physical interfaces that are returned.
POST >> /draft/physicalinterfaces >> Create a draft physical interface. Creates a new draft physical interface for the organization in the Watson IoT Platform.
GET >> /draft/physicalinterfaces/{physicalInterfaceId} >> Get a draft physical interface. Retrieve the draft physical interface with the specified id.
PUT >> /draft/physicalinterfaces/{physicalInterfaceId} >> Update a draft physical interface. Updates the draft physical interface with the specified id.
DELETE >> /draft/physicalinterfaces/{physicalInterfaceId} >> Delete a draft physical interface. Deletes the draft physical interface with the specified id from the
GET >> /draft/physicalinterfaces/{physicalInterfaceId}/events >> Get the list of event mappings. Retrieve the list of event mappings for the draft physical interface. Event mappings are keyed off of the event id specified in the MQTT topic that the inbound events are published to.
POST >> /draft/physicalinterfaces/{physicalInterfaceId}/events >> Map an event to the draft physical interface. Maps an event id to a specific event type for the draft specified physical interface.
DELETE >> /draft/physicalinterfaces/{physicalInterfaceId}/events/{eventId} >> Remove an event mapping from the draft physical interface. Removes the event mapping with the specified id from the draft physical interface.
GET >> /logicalinterfaces >> Query active logical interfaces. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. The logicalinterfaces endpoint returns the list of all of the active logical interfaces that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of active logical interfaces that are returned.
GET >> /logicalinterfaces/{logicalInterfaceId} >> Get an active logical interface. Retrieve the active logical interface with the specified id.
PATCH >> /logicalinterfaces/{logicalInterfaceId} >> Perform an operation against a logical interface. Performs the specified operation against the logical interface. The following values can be specified for the operation property: deactivate-configuration The deactivate-configuration operation will remove any active configuration that is currently associated with the logical interface. If the logical interface is associated with any device types, the state for any instances of those device types will be deleted as a result of performing the deactivate-configuration operation. The deactivate-configuration operation will fail if the logical interface is referenced by a thing schema.
GET >> /draft/logicalinterfaces >> Query draft logical interfaces. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. The logicalinterfaces endpoint returns the list of all of the draft logical interfaces that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of draft logical interfaces that are returned.
POST >> /draft/logicalinterfaces >> Create a draft logical interface. Creates a new draft logical interface for the organization in the Watson IoT Platform. The logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing.
GET >> /draft/logicalinterfaces/{logicalInterfaceId} >> Get a draft logical interface. Retrieve the draft logical interface with the specified id.
PUT >> /draft/logicalinterfaces/{logicalInterfaceId} >> Update a draft logical interface
PATCH >> /draft/logicalinterfaces/{logicalInterfaceId} >> Perform an operation against a draft logical interface
DELETE >> /draft/logicalinterfaces/{logicalInterfaceId} >> Delete a draft logical interface. Deletes the draft logical interface with the specified id from the organization in the Watson IoT Platform. Please note the the delete will fail if the draft logical interface is being referenced by a device type.
GET >> /rules >> Query active rules. Rules allow you to specify conditions that can be used to trigger notifications when the condition evaluates to true. You could then implement an application that use these notifications to drive actions. For example, you might create a rule that triggers a notification if the temperature on the state of a device exceeds a certain value. You could then use this notification to send an email. Rules are defined against a specific logical interface schema. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. At runtime, a rule condition will be evaluated whenever the state for a Device that exposes the logical interface is processed as a result of the Device publishing an event. The rules endpoint returns the list of all of the active rules that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of active rules that are returned.
GET >> /logicalinterfaces/{logicalInterfaceId}/rules >> Query active rules. Rules allow you to specify conditions that can be used to trigger notifications when the condition evaluates to true. You could then implement an application that use these notifications to drive actions. For example, you might create a rule that triggers a notification if the temperature on the state of a device exceeds a certain value. You could then use this notification to send an email. Rules are defined against a specific logical interface schema. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. At runtime, a rule condition will be evaluated whenever the state for a Device that exposes the logical interface is processed as a result of the Device publishing an event. The /logicalinterfaces/{logicalInterfaceId}/rules endpoint returns the list of all of the active rules that have been associated with the logical interface.
GET >> /logicalinterfaces/{logicalInterfaceId}/rules/{ruleId} >> Get an active rule. Retrieve the active rule with the specified id that has been associated with the specified logical interface.
GET >> /draft/rules >> Query draft rules. Rules allow you to specify conditions that can be used to trigger notifications when the condition evaluates to true. You could then implement an application that use these notifications to drive actions. For example, you might create a rule that triggers a notification if the temperature on the state of a device exceeds a certain value. You could then use this notification to send an email. Rules are defined against a specific logical interface schema. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. At runtime, a rule condition will be evaluated whenever the state for a Device that exposes the logical interface is processed as a result of the Device publishing an event. The /draft/rules endpoint returns the list of all of the draft rules that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of draft rules that are returned.
GET >> /draft/logicalinterfaces/{logicalInterfaceId}/rules >> Query draft rules. Rules allow you to specify conditions that can be used to trigger notifications when the condition evaluates to true. You could then implement an application that use these notifications to drive actions. For example, you might create a rule that triggers a notification if the temperature on the state of a device exceeds a certain value. You could then use this notification to send an email. Rules are defined against a specific logical interface schema. Logical interfaces are used to model the interfaces exposed by a device or thing in the Watson IoT Platform. A logical interface must reference a schema definition that defines the structure of the state that will be stored for the device or thing. At runtime, a rule condition will be evaluated whenever the state for a Device that exposes the logical interface is processed as a result of the Device publishing an event. The /draft/logicalinterfaces/{logicalInterfaceId}/rules endpoint returns the list of all of the draft rules that have been associated with the logical interface.
POST >> /draft/logicalinterfaces/{logicalInterfaceId}/rules >> Create a draft rule. Creates a new draft rule that is associated with the logical interface for the organization in the Watson IoT Platform.
GET >> /draft/logicalinterfaces/{logicalInterfaceId}/rules/{ruleId} >> Get a draft rule. Retrieve the draft rule with the specified id that has been associated with the specified logical interface.
PUT >> /draft/logicalinterfaces/{logicalInterfaceId}/rules/{ruleId} >> Update a draft rule.
DELETE >> /draft/logicalinterfaces/{logicalInterfaceId}/rules/{ruleId} >> Delete a draft rule. Deletes the draft rule with the specified id from the organization in the Watson IoT Platform.
GET >> /device/types >> List device types
PATCH >> /device/types/{typeId} >> Perform an operation against a device type
GET >> /device/types/{typeId}/physicalinterface >> Get the active physical interface associated with the device type. Retrieve the active physical interface that has been associated with the device type. At least one active physical interface must be associated with the device type before any mappings can be defined that will generate state for the device.
GET >> /device/types/{typeId}/logicalinterfaces >> Get the list of active logical interfaces associated with the device type. Retrieve the list of active logical interfaces that have been associated with the device type. At least one logical interface must be associated with the device type before any mappings can be defined that will generate state for the device.
GET >> /device/types/{typeId}/mappings >> Get the list of active property mappings for the device type. Retrieve the list of active property mappings for the specified device type. A property mapping defines how properties from inbound events are mapped to properties defined on an logical interface associated with the device type.
GET >> /device/types/{typeId}/mappings/{logicalInterfaceId} >> Get the active property mappings for a specific logical interface for a device type. Retrieves the active property mappings for a specific logical interface for the device type.
GET >> /draft/device/types >> List device types associated with an logical or physical interface. Retrieves the list of device types that are associated with the logical interface and/or physical interface with the ids specified using the corresponding query parameters.
PATCH >> /draft/device/types/{typeId} >> Perform an operation against a draft device type
GET >> /draft/device/types/{typeId}/physicalinterface >> Get the draft physical interface associated with the device type. Retrieve the draft physical interface that has been associated with the device type. At least one active physical interface must be associated with the device type before any mappings can be defined that will generate state for the device.
POST >> /draft/device/types/{typeId}/physicalinterface >> Associate a draft physical interface with the device type. Associates a draft physical interface with the specified device type. The draft physical interface must already exist within the organization in the Watson IoT Platform. If a draft physical interface is already associated with the device type it will be replaced with the specified physical interface.
DELETE >> /draft/device/types/{typeId}/physicalinterface >> Disassociate the draft physical interface from the device type
GET >> /draft/device/types/{typeId}/logicalinterfaces >> Get the list of draft logical interfaces associated with the device type. Retrieve the list of draft logical interfaces that have been associated with the device type. At least one active logical interface must be associated with the device type before any mappings can be defined that will generate state for the device.
POST >> /draft/device/types/{typeId}/logicalinterfaces >> Associate a draft logical interface with the device type
DELETE >> /draft/device/types/{typeId}/logicalinterfaces/{logicalInterfaceId} >> Disassociate a draft logical interface from the device type. Disassociates the draft logical interface with the specified id from the device type. Please note the the delete will fail if the draft logical interface being removed from the device type is referenced in the property mappings for the device type.
GET >> /draft/device/types/{typeId}/mappings >> Get the list of draft property mappings for the device type. Retrieve the list of draft property mappings for the specified device type. A property mapping defines how properties from inbound events are mapped to properties defined on an logical interface associated with the device type.
POST >> /draft/device/types/{typeId}/mappings >> Create the draft property mappings for a logical interface for the device type
GET >> /draft/device/types/{typeId}/mappings/{logicalInterfaceId} >> Get the draft property mappings for a specific logical interface for a device type.
PUT >> /draft/device/types/{typeId}/mappings/{logicalInterfaceId} >> Update the draft property mappings for a specific logical interface for the device type.
DELETE >> /draft/device/types/{typeId}/mappings/{logicalInterfaceId} >> Delete the draft property mappings for a specific logical interface for the device type.
GET >> /device/types/{typeId}/devices/{deviceId}/state/{logicalInterfaceId} >> Get the state for the device with the specified id
PATCH >> /device/types/{typeId}/devices/{deviceId}/state/{logicalInterfaceId} >> Perform an operation against the device state for a logical interface. Performs the specified operation against the device state for a logical interface. The following values can be specified for the operation property: reset-state The reset-state operation will reset the state of the specified device to the default values as defined by the schema for the logical interface.
GET >> /thing/types >> Query active thing types. Within the Watson IoT Platform, a Thing allows you to aggregate one or more instances of a Device or Thing together to represent a more coarse grained object. For example, you might aggregate together a temperature sensor, flow sensor and power sensor together into a Boiler. Thing Types are used to model Things. The Schema associated with a Thing Type defines the type of objects that are aggregated together to make up an instance of a Thing. A Thing Type must be created in an organization before in instance of a Thing can be created. The /thing/types endpoint returns the list of all of the active Thing types that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of Thing types that are returned.
GET >> /thing/types/{thingTypeId} >> Get an active thing type
PATCH >> /thing/types/{thingTypeId} >> Perform an operation against an active thing type
GET >> /draft/thing/types >> Query draft thing types. Within the Watson IoT Platform, a Thing allows you to aggregate one or more instances of a Device or Thing together to represent a more coarse grained object. For example, you might aggregrate together a temperature sensor, flow sensor and power sensor together into a Boiler. Thing Types are used to model Things. The Schema associated with a Thing Type defines the type of objects that are aggregated togther to make up an instance of a Thing. A Thing Type must be created in an organization before in instance of a Thing can be created. The /draft/thing/types endpoint returns the list of all of the draft Thing types that have been defined for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of draft Thing types that are returned.
POST >> /draft/thing/types >> Create a draft thing type. Creates a new draft thing type for the organization in the Watson IoT Platform. The thing type must reference the schema definition that defines the structure of instances of the thing type.
GET >> /draft/thing/types/{thingTypeId} >> Get a draft thing type
PUT >> /draft/thing/types/{thingTypeId} >> Update a draft thing type
PATCH >> /draft/thing/types/{thingTypeId} >> Perform an operation against a draft thing type
DELETE >> /draft/thing/types/{thingTypeId} >> Delete a draft thing type. Deletes the draft thing type with the specified id from the organization in the Watson IoT Platform. Please note the the delete will fail if there is an active version of the thing type or if the thing type is currently being referenced by another object.
GET >> /thing/types/{thingTypeId}/logicalinterfaces >> Get the list of active logical interfaces associated with the thing type. Retrieve the list of active logical interfaces that have been associated with the thing type. At least one logical interface must be associated with the thing type before any mappings can be defined that will generate state for the thing.
GET >> /thing/types/{thingTypeId}/mappings >> Get the list of active property mappings for the thing type. Retrieve the list of active property mappings for the specified thing type. A property mapping defines how properties from state update events on aggregated devices or things are mapped to properties defined on a logical interface associated with the thing type.
GET >> /thing/types/{thingTypeId}/mappings/{logicalInterfaceId} >> Get the active property mappings for a specific logical interface for a thing type.
GET >> /draft/thing/types/{thingTypeId}/logicalinterfaces >> Get the list of draft logical interfaces associated with the thing type. Retrieve the list of draft logical interfaces that have been associated with the draft thing type. At least one logical interface must be associated with the thing type before any mappings can be defined that will generate state for the thing.
POST >> /draft/thing/types/{thingTypeId}/logicalinterfaces >> Associate a draft logical interface with the draft thing type.
DELETE >> /draft/thing/types/{thingTypeId}/logicalinterfaces/{logicalInterfaceId} >> Disassociate a logical interface from the draft thing type
GET >> /draft/thing/types/{thingTypeId}/mappings >> Get the list of draft property mappings for the thing type. Retrieve the list of draft property mappings for the specified draft thing type. A property mapping defines how properties from state update events on aggregated devices or things are mapped to properties defined on a logical interface associated with the thing type.
POST >> /draft/thing/types/{thingTypeId}/mappings >> Create the draft property mappings for a logical interface for the thing type.
GET >> /draft/thing/types/{thingTypeId}/mappings/{logicalInterfaceId} >> Get the draft property mappings for a specific logical interface for a thing type.
PUT >> /draft/thing/types/{thingTypeId}/mappings/{logicalInterfaceId} >> Update the property mappings for a specific logical interface for the thing type.
DELETE >> /draft/thing/types/{thingTypeId}/mappings/{logicalInterfaceId} >> Delete the property mappings for a specific logical interface for the draft thing type.
GET >> /thing/types/{thingTypeId}/things >> List things. Within the Watson IoT Platform, a Thing allows you to aggregate one or more instances of a Device or Thing together to represent a more coarse grained object. For example, you might aggregrate together a temperature sensor, flow sensor and power sensor together into a Boiler. The /thing/types/{thingTypeId}/things endpoint returns the list of all of the Thing instances of the specified type that have been created for the organization in the Watson IoT Platform. Various query parameters can be used to filter, sort and page through the list of Thing instances that are returned.
POST >> /thing/types/{thingTypeId}/things >> Create a thing. Creates a thing instance of the specified type for the organization in the Watson IoT Platform. The thing type must have a valid set of Information Management metadata associated with it and activated before any instances can be created.
GET >> /thing/types/{thingTypeId}/things/{thingId} >> Get a thing. Retrieve the thing with the specified id.
PUT >> /thing/types/{thingTypeId}/things/{thingId} >> Update a thing
DELETE >> /thing/types/{thingTypeId}/things/{thingId} >> Delete a thing. Deletes the thing with the specified id from the organization in the Watson IoT Platform. Please note the the delete will fail if the thing being deleted is currently being aggregated by other thing instances.
GET >> /thing/types/{thingTypeId}/things/{thingId}/state/{logicalInterfaceId} >> Get the state for the thing with the specified id
PATCH >> /thing/types/{thingTypeId}/things/{thingId}/state/{logicalInterfaceId} >> Perform an operation against the thing state for a logical interface. Performs the specified operation against the thing state for a logical interface. The following values can be specified for the operation property: reset-state The reset-state operation will reset the state of the specified thing instance to the default values as defined by the schema for the logical interface.